#include <ArduinoJson.h>
#include <ESPAsyncWebServer.h>
#include <SPIFFS.h>
#include <SdFat.h>

#include "epd_views/views.h"
#include "hal.h"

using namespace std;

extern SdFat sd;
// 创建Server对象
AsyncWebServer server(80);

// 读取SPIFFS中index.html文件的内容，并使用网页展示
void handleRoot(AsyncWebServerRequest *request) {
  File file = SPIFFS.open("/index.html", FILE_READ);
  if (!file) {
    Serial.println("open file failed");
  }
  String content = file.readString();
  // server.send(200, "text/html", content);
  request->send(200, "text/html", content);
  file.close();
}

// 扫描wifi
void scanwifi(AsyncWebServerRequest *request) {
  int n = WiFi.scanComplete();
  vector<String> ssid_list;
  // 获取ssid数量
  if (n == 0) {
    Serial.println("no networks found");
  } else {
    Serial.print(n);
    Serial.println(" networks found");
    for (int i = 0; i < n; ++i) {
      String ssid = WiFi.SSID(i);
      ssid_list.push_back(WiFi.SSID(i));
    }
  }
  // 将ssid_list转换为,分割
  String ssids = "";
  for (int i = 0; i < ssid_list.size(); i += 2) {
    ssids += ssid_list[i];
    // 最后一个不含,
    if (i != ssid_list.size() - 2) {
      ssids += ",";
    }
  }
  Serial.println(ssids);
  // 返回结果
  request->send(200, "text/plain", ssids);
}

// 保存wifi配置
void wifi_commit(AsyncWebServerRequest *request) {
  String ssid = request->arg("ssid");
  String passwd = request->arg("passwd");
  Serial.println("ssid: " + ssid);
  Serial.println("passwd: " + passwd);
  // 将ssid和passwd写入SPIFFS
  File file = SPIFFS.open("/wifi.conf", FILE_WRITE);
  if (!file) {
    Serial.println("open file failed");
  }
  file.println(ssid);
  file.println(passwd);
  file.close();
  request->send(200, "text/plain", "ok");
  // 重启
  ESP.restart();
}

// 接受前端的post请求体并保存
void text(AsyncWebServerRequest *request) {
  Serial.println("text");
  if (request->hasParam("data", true)) {
    String text = request->arg("data");
    // 保存到SPIFFS /text.txt
    File file = SPIFFS.open("/text.txt", FILE_WRITE);
    if (!file) {
      Serial.println("open file failed");
    }
    file.print(text);
    file.close();
    Serial.println(text);
  }
  request->send(200, "text/plain", "ok");
  delay(20);
  create_view_bw(txt_reader, 1);
}

// 接受前端发送的文件并保存
void file_upload(AsyncWebServerRequest *request, const String &filename,
                 size_t index, uint8_t *data, size_t len, bool final) {
  FsFile file;
  const char *file_name = filename.c_str();
  // 创建/打开文件
  if (!index) {
    Serial.printf("UploadStart: %s\n", filename);
    // 在sd卡中保存,如果不存在则创建
    file.exists(file_name) ? file.open(file_name, O_RDWR)
                           : file.open(file_name, O_CREAT | O_RDWR);
  } else {
    file.open(file_name, O_RDWR | O_APPEND);
  }
  if (!file) {
    Serial.println("open file failed");
  }
  // 数据写入文件
  for (size_t i = 0; i < len; i++) {
    // 写入文件
    file.write(data[i]);
  }
  // 关闭文件
  if (final) {
    Serial.printf("UploadEnd: %s, %u B\n", file_name, index + len);
    file.close();
  }
}

JsonDocument get_file_ls(String path) {
  // 打开根目录
  FsFile root;
  FsFile file;
  root.open(path.c_str(), O_RDONLY);
  if (!root) {
    Serial.println("open root failed");
  }
  root.ls(LS_R | LS_DATE | LS_SIZE);
  // 创建json
  JsonDocument doc;
  JsonArray array = doc.to<JsonArray>();
  root.rewind();
  while (file.openNext(&root, O_RDONLY)) {
    if (file.isHidden()) {
      continue;
    }
    JsonDocument obj;
    char name[256];
    file.getName(name, sizeof(name));
    obj["name"] = String(name);
    obj["size"] = file.size();
    obj["isDir"] = file.isDir();
    doc.add(obj);
  }
  return doc;
}

// 返回json格式的文件列表
void file_ls(AsyncWebServerRequest *request) {
  Serial.println("file_ls");
  JsonDocument json = get_file_ls("/");
  String json_str;
  serializeJson(json, json_str);
  // 返回json
  request->send(200, "application/json", json_str);
}

void file_select(AsyncWebServerRequest *request) {
  Serial.println("file_select");
  // 获取post请求体
  String body = request->arg("plain");
  Serial.println(body);
  // 打印选中的文件
  JsonDocument reqjson;
  deserializeJson(reqjson, body);
  String name = reqjson["name"].as<String>();
  Serial.println("select file: " + name);
  FsFile file;
  file.open(name.c_str(), O_RDONLY);
  if (!file) {
    Serial.println("open file failed");
  }

  // 组装返回的json
  JsonDocument resbody;
  bool is_dir = file.isDir();
  resbody["isDir"] = is_dir;

  // 如果是文件夹则返回文件夹下的文件列表
  if (is_dir) {
    JsonDocument data = get_file_ls(name);
    resbody["data"] = data;
  } else {
    // 如果是文件则 返回文件内容
    Serial.println("open file: " + name);
    // 读取文件内容
    String content = "";
    while (file.available()) {
      content += (char)file.read();
    }
    Serial.println(content);
    // 序列化json
    JsonDocument json;
    json["name"] = name;
    json["content"] = content;

    resbody["data"] = json;
  }
  String json_str;
  serializeJson(resbody, json_str);
  // 返回文件内容
  request->send(200, "text/plain", json_str);
}

void createServer() {
  // 主页
  server.serveStatic("/", SPIFFS, "/").setDefaultFile("index.html");
  // wifi配置页面
  server.serveStatic("/wifi", SPIFFS, "/wifipage.html");
  server.on("/scanwifi", HTTP_GET, scanwifi);  // 扫描wifi
  server.on("/wifi_commit", wifi_commit);      // 保存wifi配置
  // 在线传输文本
  server.serveStatic("/text", SPIFFS, "/text.html");  // 文本传输页面
  server.on("/text_commit", HTTP_POST, text);  // 接受前端的post请求体并保存
  // 文件列表
  server.serveStatic("/file", SPIFFS, "/file.html");
  // 返回json格式的文件列表
  server.on("/file/list", HTTP_GET, file_ls);  // 文件列表
  // 返回json格式的文件列表
  server.on("/file/select", HTTP_POST, file_select);  // 文件列表
  // 在线传书
  server.onFileUpload(file_upload);  // 接受前端的post请求体并保存

  // 404
  server.onNotFound([](AsyncWebServerRequest *request) {
    request->send(404, "text/plain", "Not found");
  });

  server.begin();
  Serial.println("HTTP server started");
}
